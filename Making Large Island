//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
//User function Template for C++
class Solution {
public:
    int dfs(vector<vector<int> >& grid,
            vector<vector<int> >& vis, int i, int j, int n)
    {

        if (i >= n || j >= n || i < 0 || j < 0
            || vis[i][j] == 1 || grid[i][j] == 0) {
            return 0;
        }
        vis[i][j] = 1;

        return 1 + dfs(grid, vis, i + 1, j, n)
               + dfs(grid, vis, i, j + 1, n)
               + dfs(grid, vis, i - 1, j, n)
               + dfs(grid, vis, i, j - 1, n);
    }
    int largestRegion(vector<vector<int> >& grid)
    {

        int n = grid.size();
        vector<vector<int> > vis(n, vector<int>(n, 0));
        int ans = 0;

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
int cnt = dfs(grid, vis, i, j, n);

                    ans = max(ans, cnt);
                }
            }
        }

        return ans;
    }
    int largestIsland(vector<vector<int> >& grid)
    {

        int n = grid.size();

        int mx = -1;

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 0) {
                    grid[i][j] = 1;

                  mx = max(mx, largestRegion(grid));

                    grid[i][j] = 0;
                }
            }
        }

        if (mx == -1) {
            return n * n;
        }

        return mx;
    }
};

//{ Driver Code Starts.

int main(){
    int t;
    cin >> t;
    while(t--){

        int n;
        cin>>n;
        vector<vector<int>>grid(n,vector<int>(n));
        for(int i=0;i<n;i++)
            for(int j=0;j<n;j++)
                cin>>grid[i][j];
        Solution ob;
        cout<<ob.largestIsland(grid)<<endl;
    }
    return 0;
}

// } Driver Code Ends
